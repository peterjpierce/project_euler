"""
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""
from collections import deque
from datetime import datetime as dtime


def is_factor(divisor, number):
    """Determine if a number is a factor of another."""
    return not number % divisor


class DivisorPool:
    """Generate and prune possible divisors to check."""
    def __init__(self, maximum):
        self.range_stop = maximum + 1
        self.pool = set()

    def remove_multiples(self, value):
        """Remove multiples of factor from the pool, if > 1."""
        if value > 1:
            self.pool.difference_update(range(value, self.range_stop, value))

    def __iter__(self):
        self.pool.update(range(1, self.range_stop))
        return self

    def __next__(self):
        try:
            return self.pool.pop()
        except KeyError:
            raise StopIteration


def run():
    start_time = dtime.now()
    cursor, triangle_number, results = 0, 0, None
    verbose = True
    # divisors_needed = 6
    divisors_needed = 501

    while True:
        cursor += 1
        triangle_number += cursor
        possible_divisors = DivisorPool(int(triangle_number / 2) + 1)
        divisors = deque()

        for number in possible_divisors:
            if is_factor(number, triangle_number):
                divisors.append(number)
            else:
                possible_divisors.remove_multiples(number)

        divisors.append(triangle_number)
        divisor_count = len(divisors)

        if verbose:
            print('%4d divisors for %d' % (divisor_count, triangle_number))

        if divisor_count >= divisors_needed:
            results = {'number': triangle_number, 'divisor_count': divisor_count}
            break

    answer = results

    print('answer is: %s' % str(answer))
    print('elapsed seconds: %f' % (dtime.now() - start_time).total_seconds())


if __name__ == '__main__':
    run()
