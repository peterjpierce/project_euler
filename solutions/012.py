"""
Problem 12
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?
"""
from datetime import datetime as dtime
from math import sqrt

from shared import util


def run():
    start_time = dtime.now()
    cursor, triangle_number, divisor_count, results = 0, 0, 0, None
    verbose = True
    divisors_needed = 501
    # divisors_needed = 6

    while divisor_count < divisors_needed:
        cursor += 1
        triangle_number += cursor
        unfactored_portion = triangle_number
        accumulated_factors = {}

        # factorize this number
        for prime in util.primes(sqrt(triangle_number), verbose=False):
            while util.is_divisor(prime, unfactored_portion):
                accumulated_factors[prime] = accumulated_factors.get(prime, 0) + 1
                unfactored_portion /= prime

        if unfactored_portion > 1:
            accumulated_factors[unfactored_portion] = 1

        # calculate count of divisors
        divisor_count = 1
        for exponent in accumulated_factors.values():
            divisor_count *= (exponent + 1)

        if verbose:
            print('%4d divisors for %d' % (divisor_count, triangle_number))

    answer = {'number': triangle_number, 'divisor_count': divisor_count}
    print('answer is: %s' % str(answer))
    print('elapsed seconds: %f' % (dtime.now() - start_time).total_seconds())


if __name__ == '__main__':
    run()
